"use client"

import { useState } from "react"
import { Check, ChevronsUpDown } from "lucide-react"
import { cn } from "@/lib/utils"
import { Button } from "@/src/components/ui/button"
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from "@/src/components/ui/command"
import { Popover, PopoverContent, PopoverTrigger } from "@/src/components/ui/popover"

// Define the options for each category with Unicode characters
const options = {
  startingWrapper: [
    "(",
    "[",
    "{",
    "⌐",
    "╰",
    "┌",
    "╭",
    "ᕕ",
    "ᕦ",
    "ᕙ",
    "ლ",
    "┬",
    "¯\\",
    "╯",
    "ಠ",
    "◉",
    "⊙",
    "●",
    "◕",
    "☉",
  ],
  startingEyebrow: ["͡", "°", "ಠ", "◉", "⊙", "●", "◕", "☉", "⌐", "¬", "╰", "┌", "╭", "ᕕ", "ᕦ", "ᕙ", "ლ", "┬", "¯", "╯"],
  startingEye: [
    "°",
    "ಠ",
    "◉",
    "⊙",
    "●",
    "◕",
    "☉",
    "⌐",
    "¬",
    "╰",
    "┌",
    "╭",
    "ᕕ",
    "ᕦ",
    "ᕙ",
    "ლ",
    "┬",
    "¯",
    "╯",
    "◔",
    "◑",
    "◒",
    "◓",
    "◐",
    "●",
    "○",
    "◯",
    "⚫",
    "⚪",
    "🔴",
    "🟠",
    "🟡",
    "🟢",
    "🔵",
    "🟣",
    "⭕",
    "❌",
    "✖",
    "➕",
    "➖",
    "➗",
    "✔",
    "☑",
    "✅",
    "❎",
    "🆚",
    "📍",
    "📌",
    "📎",
    "🔗",
    "⛓",
    "🔒",
    "🔓",
    "🔐",
    "🔑",
    "🗝",
    "🔨",
    "⚒",
    "🛠",
    "⚙",
    "🔧",
    "🔩",
    "⚡",
    "🔥",
    "💧",
    "🌊",
    "❄",
    "☃",
    "⛄",
    "☀",
    "🌞",
    "🌝",
    "🌛",
    "🌜",
    "🌚",
    "🌕",
    "🌖",
    "🌗",
    "🌘",
    "🌑",
    "🌒",
    "🌓",
    "🌔",
    "⭐",
    "🌟",
    "💫",
    "✨",
    "☄",
    "💥",
    "🔆",
    "🔅",
    "💡",
    "🔦",
    "🏮",
    "📱",
    "📲",
    "💻",
    "⌨",
    "🖥",
    "🖨",
    "🖱",
    "🖲",
    "💽",
    "💾",
    "💿",
    "📀",
    "📼",
    "📷",
    "📸",
    "📹",
    "🎥",
    "📽",
    "🎞",
    "📺",
    "📻",
    "🎙",
    "🎚",
    "🎛",
    "⏱",
    "⏲",
    "⏰",
    "🕰",
    "⏳",
    "⌛",
    "📡",
    "🔋",
    "🔌",
    "💡",
    "🔦",
    "🕯",
    "🪔",
    "🧯",
    "🛢",
    "💸",
    "💵",
    "💴",
    "💶",
    "💷",
    "💰",
    "💳",
    "💎",
    "⚖",
    "🧰",
    "🔗",
    "⛓",
    "🧲",
    "🔫",
    "💣",
    "🧨",
    "🪓",
    "🔪",
    "🗡",
    "⚔",
    "🛡",
    "🚬",
    "⚰",
    "⚱",
    "🏺",
    "🔮",
    "📿",
    "🧿",
    "💈",
    "⚗",
    "🔭",
    "🔬",
    "🕳",
    "💊",
    "💉",
    "🧬",
    "🦠",
    "🧫",
    "🧪",
    "🌡",
    "🧹",
    "🧺",
    "🧻",
    "🚽",
    "🚰",
    "🚿",
    "🛁",
    "🛀",
    "🧴",
    "🧷",
    "🧸",
    "🧵",
    "🧶",
    "🪡",
    "🧾",
    "🧮",
    "🪆",
    "🪅",
    "🎊",
    "🎉",
    "🎈",
    "🎀",
    "🎁",
    "🎗",
    "🎟",
    "🎫",
    "🎖",
    "🏆",
    "🏅",
    "🥇",
    "🥈",
    "🥉",
    "⚽",
    "⚾",
    "🥎",
    "🏀",
    "🏐",
    "🏈",
    "🏉",
    "🎾",
    "🥏",
    "🎳",
    "🏏",
    "🏑",
    "🏒",
    "🥍",
    "🏓",
    "🏸",
    "🥊",
    "🥋",
    "🎽",
    "⛳",
    "⛷",
    "🎿",
    "🛷",
    "🥌",
    "🎯",
    "🪀",
    "🪁",
    "🎱",
    "🔮",
    "🪄",
    "🧿",
    "🎮",
    "🕹",
    "🎰",
    "🎲",
    "🧩",
    "🧸",
    "♠",
    "♥",
    "♦",
    "♣",
    "♟",
    "🃏",
    "🀄",
    "🎴",
    "🎭",
    "🖼",
    "🎨",
    "🧵",
    "🧶",
    "🪡",
  ],
  nose: [
    "ʖ",
    "͜",
    "‿",
    "ᴗ",
    "ω",
    "³",
    "ε",
    "з",
    "ᵕ",
    "◡",
    "‾",
    "∀",
    "∩",
    "∪",
    "⌒",
    "︶",
    "︵",
    "︿",
    "﹀",
    "∩",
    "∪",
    "⌣",
    "⌢",
    "︺",
    "︹",
    "︸",
    "︷",
    "︶",
    "︵",
    "︴",
    "︳",
    "︲",
    "︱",
    "︰",
    "︯",
    "︮",
    "︭",
    "︬",
    "︫",
    "︪",
    "︩",
    "︨",
    "︧",
    "︦",
    "︥",
    "︤",
    "︣",
    "︢",
    "︡",
    "︠",
    "︟",
    "︞",
    "︝",
    "︜",
    "︛",
    "︚",
    "︙",
    "︘",
    "︗",
    "︖",
    "︕",
    "︔",
    "︓",
    "︒",
    "︑",
    "︐",
    "️",
    "︎",
    "︍",
    "︌",
    "︋",
    "︊",
    "︉",
    "︈",
    "︇",
    "︆",
    "︅",
    "︄",
    "︃",
    "︂",
    "︁",
    "︀",
    "ﹿ",
    "ﹾ",
    "ﹽ",
    "ﹼ",
    "ﹻ",
    "ﹺ",
    "ﹹ",
    "ﹸ",
    "ﹷ",
    "ﹶ",
    "﹵",
    "ﹴ",
    "ﹳ",
    "ﹲ",
    "ﹱ",
    "ﹰ",
    "﹯",
    "﹮",
    "﹭",
    "﹬",
    "﹫",
    "﹪",
    "﹩",
    "﹨",
    "﹧",
    "﹦",
    "﹥",
    "﹤",
    "﹣",
    "﹢",
    "﹡",
    "﹠",
    "﹟",
    "﹞",
    "﹝",
    "﹜",
    "﹛",
    "﹚",
    "﹙",
    "﹘",
    "﹗",
    "﹖",
    "﹕",
    "﹔",
    "﹓",
    "﹒",
    "﹑",
    "﹐",
    "﹏",
    "﹎",
    "﹍",
    "﹌",
    "﹋",
    "﹊",
    "﹉",
    "﹈",
    "﹇",
    "﹆",
    "﹅",
    "﹄",
    "﹃",
    "﹂",
    "﹁",
    "﹀",
  ],
  endingEyebrow: ["͡", "°", "ಠ", "◉", "⊙", "●", "◕", "☉", "⌐", "¬", "╰", "┌", "╭", "ᕕ", "ᕦ", "ᕙ", "ლ", "┬", "¯", "╯"],
  endingEye: [
    "°",
    "ಠ",
    "◉",
    "⊙",
    "●",
    "◕",
    "☉",
    "⌐",
    "¬",
    "╰",
    "┌",
    "╭",
    "ᕕ",
    "ᕦ",
    "ᕙ",
    "ლ",
    "┬",
    "¯",
    "╯",
    "◔",
    "◑",
    "◒",
    "◓",
    "◐",
    "●",
    "○",
    "◯",
    "⚫",
    "⚪",
  ],
  endingWrapper: [")", "]", "}", "╯", "╮", "┐", "╯", "ᕗ", "ᕤ", "ᕘ", "ლ", "┴", "/¯", "╰", "ಠ", "◉", "⊙", "●", "◕", "☉"],
}

// Define the display names for each category
const categoryDisplayNames = {
  startingWrapper: "Starting Wrapper",
  startingEyebrow: "Starting Eyebrow",
  startingEye: "Starting Eye",
  nose: "Nose",
  endingEyebrow: "Ending Eyebrow",
  endingEye: "Ending Eye",
  endingWrapper: "Ending Wrapper",
}

type SelectionComboboxesProps = {
  onSelectionChange: (category: string, value: string) => void
}

export function SelectionComboboxes({ onSelectionChange }: SelectionComboboxesProps) {
  // State to track open state of each popover
  const [openStates, setOpenStates] = useState({
    startingWrapper: false,
    startingEyebrow: false,
    startingEye: false,
    nose: false,
    endingEyebrow: false,
    endingEye: false,
    endingWrapper: false,
  })

  // State to track the selected value for each category
  const [selectedValues, setSelectedValues] = useState({
    startingWrapper: "",
    startingEyebrow: "",
    startingEye: "",
    nose: "",
    endingEyebrow: "",
    endingEye: "",
    endingWrapper: "",
  })

  // Function to handle opening/closing a popover
  const toggleOpen = (category: string, isOpen: boolean) => {
    setOpenStates((prev) => ({
      ...prev,
      [category]: isOpen,
    }))
  }

  // Function to handle selection of an option
  const handleSelect = (category: string, value: string) => {
    setSelectedValues((prev) => ({
      ...prev,
      [category]: value,
    }))
    onSelectionChange(category, value)
    toggleOpen(category, false)
  }

  // Generate comboboxes for all categories
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
      {Object.keys(options).map((category) => (
        <div key={category} className="flex flex-col space-y-1.5">
          <label htmlFor={category} className="text-sm font-medium text-zinc-300">
            {categoryDisplayNames[category as keyof typeof categoryDisplayNames]}
          </label>
          <Popover
            open={openStates[category as keyof typeof openStates]}
            onOpenChange={(open) => toggleOpen(category, open)}
          >
            <PopoverTrigger asChild>
              <Button
                variant="outline"
                role="combobox"
                aria-expanded={openStates[category as keyof typeof openStates]}
                className="justify-between bg-zinc-900 border-zinc-700 text-zinc-200 hover:bg-zinc-800 hover:text-white"
              >
                {selectedValues[category as keyof typeof selectedValues] ||
                  `Select ${categoryDisplayNames[category as keyof typeof categoryDisplayNames]}`}
                <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
              </Button>
            </PopoverTrigger>
            <PopoverContent className="p-0 bg-zinc-900 border-zinc-700 text-zinc-200">
              <Command className="bg-transparent">
                <CommandInput
                  placeholder={`Search ${categoryDisplayNames[category as keyof typeof categoryDisplayNames]}...`}
                  className="text-zinc-200"
                />
                <CommandList>
                  <CommandEmpty>No option found.</CommandEmpty>
                  <CommandGroup>
                    {options[category as keyof typeof options].map((option) => (
                      <CommandItem
                        key={option}
                        value={option}
                        onSelect={() => handleSelect(category, option)}
                        className="hover:bg-zinc-800"
                      >
                        <Check
                          className={cn(
                            "mr-2 h-4 w-4",
                            selectedValues[category as keyof typeof selectedValues] === option
                              ? "opacity-100"
                              : "opacity-0",
                          )}
                        />
                        {option}
                      </CommandItem>
                    ))}
                  </CommandGroup>
                </CommandList>
              </Command>
            </PopoverContent>
          </Popover>
        </div>
      ))}
    </div>
  )
}
