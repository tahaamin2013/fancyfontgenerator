"use client"

import { useState } from "react"
import { Button } from "@/src/components/ui/button"
import { Textarea } from "@/src/components/ui/textarea"
import { Card, CardContent, CardHeader, CardTitle } from "@/src/components/ui/card"
import { Badge } from "@/src/components/ui/badge"
import { Copy, Check } from "lucide-react"
import Script from "next/script"

export default function GeneratoreTestoCorsivo() {
  const [inputText, setInputText] = useState("")
  const [outputText, setOutputText] = useState("")
  const [copiedIndex, setCopiedIndex] = useState<number | null>(null)
  const [selectedStyle, setSelectedStyle] = useState("corsivo")

  // Complete list of all keywords


  const styles = [
    {
      name: "Corsivo",
      key: "corsivo",
      transform: (text: string) => {
        const italicMap: Record<string, string> = {
          a: "ùò¢",
          b: "ùò£",
          c: "ùò§",
          d: "ùò•",
          e: "ùò¶",
          f: "ùòß",
          g: "ùò®",
          h: "ùò©",
          i: "ùò™",
          j: "ùò´",
          k: "ùò¨",
          l: "ùò≠",
          m: "ùòÆ",
          n: "ùòØ",
          o: "ùò∞",
          p: "ùò±",
          q: "ùò≤",
          r: "ùò≥",
          s: "ùò¥",
          t: "ùòµ",
          u: "ùò∂",
          v: "ùò∑",
          w: "ùò∏",
          x: "ùòπ",
          y: "ùò∫",
          z: "ùòª",
          A: "ùòà",
          B: "ùòâ",
          C: "ùòä",
          D: "ùòã",
          E: "ùòå",
          F: "ùòç",
          G: "ùòé",
          H: "ùòè",
          I: "ùòê",
          J: "ùòë",
          K: "ùòí",
          L: "ùòì",
          M: "ùòî",
          N: "ùòï",
          O: "ùòñ",
          P: "ùòó",
          Q: "ùòò",
          R: "ùòô",
          S: "ùòö",
          T: "ùòõ",
          U: "ùòú",
          V: "ùòù",
          W: "ùòû",
          X: "ùòü",
          Y: "ùò†",
          Z: "ùò°",
        }
        return text
          .split("")
          .map((char) => italicMap[char] || char)
          .join("")
      },
    },
    {
      name: "Grassetto",
      key: "grassetto",
      transform: (text: string) => {
        const boldMap: Record<string, string> = {
          a: "ùóÆ",
          b: "ùóØ",
          c: "ùó∞",
          d: "ùó±",
          e: "ùó≤",
          f: "ùó≥",
          g: "ùó¥",
          h: "ùóµ",
          i: "ùó∂",
          j: "ùó∑",
          k: "ùó∏",
          l: "ùóπ",
          m: "ùó∫",
          n: "ùóª",
          o: "ùóº",
          p: "ùóΩ",
          q: "ùóæ",
          r: "ùóø",
          s: "ùòÄ",
          t: "ùòÅ",
          u: "ùòÇ",
          v: "ùòÉ",
          w: "ùòÑ",
          x: "ùòÖ",
          y: "ùòÜ",
          z: "ùòá",
          A: "ùóî",
          B: "ùóï",
          C: "ùóñ",
          D: "ùóó",
          E: "ùóò",
          F: "ùóô",
          G: "ùóö",
          H: "ùóõ",
          I: "ùóú",
          J: "ùóù",
          K: "ùóû",
          L: "ùóü",
          M: "ùó†",
          N: "ùó°",
          O: "ùó¢",
          P: "ùó£",
          Q: "ùó§",
          R: "ùó•",
          S: "ùó¶",
          T: "ùóß",
          U: "ùó®",
          V: "ùó©",
          W: "ùó™",
          X: "ùó´",
          Y: "ùó¨",
          Z: "ùó≠",
          "0": "ùü¨",
          "1": "ùü≠",
          "2": "ùüÆ",
          "3": "ùüØ",
          "4": "ùü∞",
          "5": "ùü±",
          "6": "ùü≤",
          "7": "ùü≥",
          "8": "ùü¥",
          "9": "ùüµ",
        }
        return text
          .split("")
          .map((char) => boldMap[char] || char)
          .join("")
      },
    },
    {
      name: "Grassetto Corsivo",
      key: "grassetto-corsivo",
      transform: (text: string) => {
        const boldItalicMap: Record<string, string> = {
          a: "ùôñ",
          b: "ùôó",
          c: "ùôò",
          d: "ùôô",
          e: "ùôö",
          f: "ùôõ",
          g: "ùôú",
          h: "ùôù",
          i: "ùôû",
          j: "ùôü",
          k: "ùô†",
          l: "ùô°",
          m: "ùô¢",
          n: "ùô£",
          o: "ùô§",
          p: "ùô•",
          q: "ùô¶",
          r: "ùôß",
          s: "ùô®",
          t: "ùô©",
          u: "ùô™",
          v: "ùô´",
          w: "ùô¨",
          x: "ùô≠",
          y: "ùôÆ",
          z: "ùôØ",
          A: "ùòº",
          B: "ùòΩ",
          C: "ùòæ",
          D: "ùòø",
          E: "ùôÄ",
          F: "ùôÅ",
          G: "ùôÇ",
          H: "ùôÉ",
          I: "ùôÑ",
          J: "ùôÖ",
          K: "ùôÜ",
          L: "ùôá",
          M: "ùôà",
          N: "ùôâ",
          O: "ùôä",
          P: "ùôã",
          Q: "ùôå",
          R: "ùôç",
          S: "ùôé",
          T: "ùôè",
          U: "ùôê",
          V: "ùôë",
          W: "ùôí",
          X: "ùôì",
          Y: "ùôî",
          Z: "ùôï",
        }
        return text
          .split("")
          .map((char) => boldItalicMap[char] || char)
          .join("")
      },
    },
    {
      name: "Corsivo Elegante",
      key: "corsivo-elegante",
      transform: (text: string) => {
        return text
          .split("")
          .map((char) => {
            if (char >= "a" && char <= "z") {
              const scriptLower: Record<string, string> = {
                a: "ùí∂",
                b: "ùí∑",
                c: "ùí∏",
                d: "ùíπ",
                e: "ùëí",
                f: "ùíª",
                g: "ùëî",
                h: "ùíΩ",
                i: "ùíæ",
                j: "ùíø",
                k: "ùìÄ",
                l: "ùìÅ",
                m: "ùìÇ",
                n: "ùìÉ",
                o: "ùëú",
                p: "ùìÖ",
                q: "ùìÜ",
                r: "ùìá",
                s: "ùìà",
                t: "ùìâ",
                u: "ùìä",
                v: "ùìã",
                w: "ùìå",
                x: "ùìç",
                y: "ùìé",
                z: "ùìè",
              }
              return scriptLower[char] || char
            } else if (char >= "A" && char <= "Z") {
              const scriptUpper: Record<string, string> = {
                A: "ùíú",
                B: "‚Ñ¨",
                C: "ùíû",
                D: "ùíü",
                E: "‚Ñ∞",
                F: "‚Ñ±",
                G: "ùí¢",
                H: "‚Ñã",
                I: "‚Ñê",
                J: "ùí•",
                K: "ùí¶",
                L: "‚Ñí",
                M: "‚Ñ≥",
                N: "ùí©",
                O: "ùí™",
                P: "ùí´",
                Q: "ùí¨",
                R: "‚Ñõ",
                S: "ùíÆ",
                T: "ùíØ",
                U: "ùí∞",
                V: "ùí±",
                W: "ùí≤",
                X: "ùí≥",
                Y: "ùí¥",
                Z: "ùíµ",
              }
              return scriptUpper[char] || char
            }
            return char
          })
          .join("")
      },
    },
    {
      name: "Testo Piccolo",
      key: "piccolo",
      transform: (text: string) => {
        return text
          .split("")
          .map((char) => {
            const smallMap: Record<string, string> = {
              a: "·µÉ",
              b: "·µá",
              c: "·∂ú",
              d: "·µà",
              e: "·µâ",
              f: "·∂†",
              g: "·µç",
              h: " ∞",
              i: "‚Å±",
              j: " ≤",
              k: "·µè",
              l: "À°",
              m: "·µê",
              n: "‚Åø",
              o: "·µí",
              p: "·µñ",
              q: "·ë´",
              r: " ≥",
              s: "À¢",
              t: "·µó",
              u: "·µò",
              v: "·µõ",
              w: " ∑",
              x: "À£",
              y: " ∏",
              z: "·∂ª",
              A: "·¥¨",
              B: "·¥Æ",
              C: "·∂ú",
              D: "·¥∞",
              E: "·¥±",
              F: "·∂†",
              G: "·¥≥",
              H: "·¥¥",
              I: "·¥µ",
              J: "·¥∂",
              K: "·¥∑",
              L: "·¥∏",
              M: "·¥π",
              N: "·¥∫",
              O: "·¥º",
              P: "·¥æ",
              Q: "·ë´",
              R: "·¥ø",
              S: "À¢",
              T: "·µÄ",
              U: "·µÅ",
              V: "‚±Ω",
              W: "·µÇ",
              X: "À£",
              Y: " ∏",
              Z: "·∂ª",
              "0": "‚Å∞",
              "1": "¬π",
              "2": "¬≤",
              "3": "¬≥",
              "4": "‚Å¥",
              "5": "‚Åµ",
              "6": "‚Å∂",
              "7": "‚Å∑",
              "8": "‚Å∏",
              "9": "‚Åπ",
            }
            return smallMap[char] || char
          })
          .join("")
      },
    },
    {
      name: "Cerchiato",
      key: "cerchiato",
      transform: (text: string) => {
        return text
          .split("")
          .map((char) => {
            if (char >= "a" && char <= "z") {
              return String.fromCharCode(0x24d0 + char.charCodeAt(0) - "a".charCodeAt(0))
            } else if (char >= "A" && char <= "Z") {
              return String.fromCharCode(0x24b6 + char.charCodeAt(0) - "A".charCodeAt(0))
            } else if (char >= "0" && char <= "9") {
              return String.fromCharCode(0x2460 + char.charCodeAt(0) - "0".charCodeAt(0))
            }
            return char
          })
          .join("")
      },
    },
    {
      name: "Sottosopra",
      key: "sottosopra",
      transform: (text: string) => {
        const flipMap: Record<string, string> = {
          a: "…ê",
          b: "q",
          c: "…î",
          d: "p",
          e: "«ù",
          f: "…ü",
          g: "∆É",
          h: "…•",
          i: "·¥â",
          j: "…æ",
          k: " û",
          l: "l",
          m: "…Ø",
          n: "u",
          o: "o",
          p: "d",
          q: "b",
          r: "…π",
          s: "s",
          t: " á",
          u: "n",
          v: " å",
          w: " ç",
          x: "x",
          y: " é",
          z: "z",
          A: "‚àÄ",
          B: "B",
          C: "∆Ü",
          D: "D",
          E: "∆é",
          F: "‚Ñ≤",
          G: "◊§",
          H: "H",
          I: "I",
          J: "≈ø",
          K: " û",
          L: "À•",
          M: "W",
          N: "N",
          O: "O",
          P: "‘Ä",
          Q: "Q",
          R: "R",
          S: "S",
          T: "‚î¥",
          U: "‚à©",
          V: "Œõ",
          W: "M",
          X: "X",
          Y: "‚ÖÑ",
          Z: "Z",
          "0": "0",
          "1": "∆ñ",
          "2": "·ÑÖ",
          "3": "∆ê",
          "4": "„Ñ£",
          "5": "œõ",
          "6": "9",
          "7": "„Ñ•",
          "8": "8",
          "9": "6",
          ".": "Àô",
          ",": "'",
          "'": ",",
          '"': ",,",
          "`": ",",
          "?": "¬ø",
          "!": "¬°",
          "(": ")",
          ")": "(",
          "[": "]",
          "]": "[",
          "{": "}",
          "}": "{",
          "<": ">",
          ">": "<",
          "&": "‚Öã",
          _: "‚Äæ",
        }
        return text
          .split("")
          .map((char) => flipMap[char] || char)
          .reverse()
          .join("")
      },
    },
    {
      name: "Maiuscoletto",
      key: "maiuscoletto",
      transform: (text: string) => {
        return text
          .split("")
          .map((char) => {
            if (char >= "a" && char <= "z") {
              const smallCapsMap: Record<string, string> = {
                a: "·¥Ä",
                b: " ô",
                c: "·¥Ñ",
                d: "·¥Ö",
                e: "·¥á",
                f: "Íú∞",
                g: "…¢",
                h: " ú",
                i: "…™",
                j: "·¥ä",
                k: "·¥ã",
                l: " ü",
                m: "·¥ç",
                n: "…¥",
                o: "·¥è",
                p: "·¥ò",
                q: "«´",
                r: " Ä",
                s: "s",
                t: "·¥õ",
                u: "·¥ú",
                v: "·¥†",
                w: "·¥°",
                x: "x",
                y: " è",
                z: "·¥¢",
              }
              return smallCapsMap[char] || char
            } else if (char >= "A" && char <= "Z") {
              return char
            }
            return char
          })
          .join("")
      },
    },
  ]

const uppercaseAlphabets = [
  { letter: "A", italic: "ùê¥", keywords: ["a corsivo maiuscolo", "a corsivo"] },
  { letter: "B", italic: "ùêµ", keywords: ["b corsivo maiuscolo"] },
  { letter: "C", italic: "ùê∂", keywords: ["c corsivo maiuscolo"] },
  { letter: "D", italic: "ùê∑", keywords: ["d corsivo maiuscolo", "d in corsivo maiuscolo", "d maiuscola corsivo"] },
  { letter: "E", italic: "ùê∏", keywords: ["e corsivo maiuscolo"] },
  { letter: "F", italic: "ùêπ", keywords: ["f corsivo maiuscolo", "f maiuscola corsivo", "f in corsivo", "f in corsivo maiuscolo"] },
  { letter: "G", italic: "ùê∫", keywords: ["g maiuscola corsivo", "g corsivo maiuscolo", "g in corsivo maiuscolo"] },
  { letter: "H", italic: "ùêª", keywords: ["h corsivo maiuscolo"] },
  { letter: "I", italic: "ùêº", keywords: ["i corsivo", "i corsivo maiuscolo"] },
  { letter: "J", italic: "ùêΩ", keywords: ["j in corsivo maiuscolo", "j in maiuscolo corsivo"] },
  { letter: "K", italic: "ùêæ", keywords: ["k in corsivo maiuscolo"] },
  { letter: "L", italic: "ùêø", keywords: ["l corsivo maiuscolo", "l maiuscola corsivo"] },
  { letter: "M", italic: "ùëÄ", keywords: ["m corsivo", "m corsivo maiuscolo"] },
  { letter: "N", italic: "ùëÅ", keywords: ["n corsivo maiuscolo"] },
  { letter: "O", italic: "ùëÇ", keywords: ["o corsivo maiuscolo"] },
  { letter: "P", italic: "ùëÉ", keywords: ["p corsivo maiuscolo", "p in corsivo maiuscolo"] },
  { letter: "Q", italic: "ùëÑ", keywords: ["q corsivo maiuscolo"] },
  { letter: "R", italic: "ùëÖ", keywords: ["r in corsivo", "r maiuscola corsivo", "r corsivo maiuscolo", "r corsivo"] },
  { letter: "S", italic: "ùëÜ", keywords: ["s corsivo maiuscolo", "s maiuscola corsivo", "s in corsivo maiuscolo", "s corsivo"] },
  { letter: "T", italic: "ùëá", keywords: ["t maiuscola corsivo", "t in corsivo maiuscolo", "t corsivo maiuscolo", "t in corsivo", "t corsivo"] },
  { letter: "U", italic: "ùëà", keywords: ["u corsivo maiuscolo"] },
  { letter: "V", italic: "ùëâ", keywords: ["v corsivo", "v corsivo maiuscolo"] },
  { letter: "W", italic: "ùëä", keywords: ["w corsivo maiuscolo"] },
  { letter: "X", italic: "ùëã", keywords: ["x corsivo maiuscolo"] },
  { letter: "Y", italic: "ùëå", keywords: ["y corsivo maiuscolo"] },
  { letter: "Z", italic: "ùëç", keywords: ["z corsivo maiuscolo"] },
];

const lowercaseAlphabets = [
  { letter: "a", italic: "ùëé", keywords: ["a corsivo", "a corsivo minuscolo"] },
  { letter: "b", italic: "ùëè", keywords: ["b corsivo minuscolo"] },
  { letter: "c", italic: "ùëê", keywords: ["c corsivo minuscolo"] },
  { letter: "d", italic: "ùëë", keywords: ["d corsivo minuscolo"] },
  { letter: "e", italic: "ùëí", keywords: ["e corsivo minuscolo"] },
  { letter: "f", italic: "ùëì", keywords: ["f corsivo minuscolo"] },
  { letter: "g", italic: "ùëî", keywords: ["g corsivo minuscolo"] },
  { letter: "h", italic: "‚Ñé", keywords: ["h corsivo minuscolo"] },
  { letter: "i", italic: "ùëñ", keywords: ["i corsivo", "i corsivo minuscolo"] },
  { letter: "j", italic: "ùëó", keywords: ["j corsivo minuscolo"] },
  { letter: "k", italic: "ùëò", keywords: ["k corsivo minuscolo"] },
  { letter: "l", italic: "ùëô", keywords: ["l corsivo minuscolo"] },
  { letter: "m", italic: "ùëö", keywords: ["m corsivo", "m corsivo minuscolo"] },
  { letter: "n", italic: "ùëõ", keywords: ["n corsivo minuscolo"] },
  { letter: "o", italic: "ùëú", keywords: ["o corsivo minuscolo"] },
  { letter: "p", italic: "ùëù", keywords: ["p corsivo minuscolo"] },
  { letter: "q", italic: "ùëû", keywords: ["q corsivo minuscolo"] },
  { letter: "r", italic: "ùëü", keywords: ["r in corsivo", "r corsivo", "r corsivo minuscolo"] },
  { letter: "s", italic: "ùë†", keywords: ["s corsivo", "s corsivo minuscolo"] },
  { letter: "t", italic: "ùë°", keywords: ["t in corsivo", "t corsivo", "t corsivo minuscolo"] },
  { letter: "u", italic: "ùë¢", keywords: ["u corsivo minuscolo"] },
  { letter: "v", italic: "ùë£", keywords: ["v corsivo", "v corsivo minuscolo"] },
  { letter: "w", italic: "ùë§", keywords: ["w corsivo minuscolo"] },
  { letter: "x", italic: "ùë•", keywords: ["x corsivo minuscolo"] },
  { letter: "y", italic: "ùë¶", keywords: ["y corsivo minuscolo"] },
  { letter: "z", italic: "ùëß", keywords: ["z corsivo minuscolo"] },
];


  const handleStyleChange = (style: any) => {
    setSelectedStyle(style.key)
    if (inputText) {
      setOutputText(style.transform(inputText))
    }
  }

  const handleInputChange = (text: string) => {
    setInputText(text)
    const currentStyle = styles.find((s) => s.key === selectedStyle)
    if (currentStyle) {
      setOutputText(currentStyle.transform(text))
    }
  }

  const copyToClipboard = async (text: string, index?: number) => {
    try {
      await navigator.clipboard.writeText(text)
      setCopiedIndex(index ?? -1)
      setTimeout(() => setCopiedIndex(null), 2000)
    } catch (err) {
      console.error("Errore nel copiare il testo: ", err)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-100 p-4">
      <div className="max-w-6xl mx-auto space-y-8">
        {/* Header */}
        <div className="text-center space-y-4">
          <h1 className="text-4xl md:text-6xl font-bold bg-gradient-to-r from-purple-600 via-blue-600 to-indigo-600 bg-clip-text text-transparent">
            Generatore di Testo Corsivo
          </h1>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">
            Trasforma il tuo testo in bellissimi stili corsivi. Copia e incolla caratteri speciali della tastiera,
            simboli e font corsivi.
          </p>
        </div>

        {/* Main Generator */}
        <Card className="shadow-2xl border-0 bg-white/80 backdrop-blur-sm">
          <CardHeader>
            <CardTitle className="text-2xl text-center text-gray-800">Generatore di Stili di Testo</CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Input Section */}
            <div className="space-y-3">
              <label className="text-sm font-semibold text-gray-700">Inserimento</label>
              <Textarea
                placeholder="Digita/Incolla il Tuo Testo Qui"
                value={inputText}
                onChange={(e) => handleInputChange(e.target.value)}
                className="min-h-[120px] text-lg border-2 border-purple-200 focus:border-purple-400 rounded-xl"
              />
            </div>

            {/* Style Buttons */}
            <div className="space-y-3">
              <label className="text-sm font-semibold text-gray-700">Scegli Stile</label>
              <div className="flex flex-wrap gap-2">
                {styles.map((style) => (
                  <Button
                    key={style.key}
                    variant={selectedStyle === style.key ? "default" : "outline"}
                    onClick={() => handleStyleChange(style)}
                    className={`rounded-full transition-all duration-200 ${
                      selectedStyle === style.key
                        ? "bg-gradient-to-r from-purple-500 to-blue-500 text-white shadow-lg"
                        : "hover:bg-purple-50 border-purple-200"
                    }`}
                  >
                    {style.name}
                  </Button>
                ))}
              </div>
            </div>

            {/* Output Section */}
            <div className="space-y-3">
              <div className="flex justify-between items-center">
                <label className="text-sm font-semibold text-gray-700">Risultato</label>
                <Button
                  onClick={() => copyToClipboard(outputText)}
                  variant="outline"
                  size="sm"
                  className="rounded-full border-purple-200 hover:bg-purple-50"
                >
                  {copiedIndex === -1 ? <Check className="w-4 h-4 text-green-500" /> : <Copy className="w-4 h-4" />}
                  Copia
                </Button>
              </div>
              <div className="min-h-[120px] p-4 bg-gray-50 border-2 border-gray-200 rounded-xl text-lg font-mono">
                {outputText || "Il tuo testo stilizzato apparir√† qui..."}
              </div>
            </div>
          </CardContent>
        </Card>

  <div className=" hidden md:flex justify-center w-full ">
      <div
            id="ad-container-728x90"
            style={{ width: "100%", maxWidth: "728px", minHeight: "90px" }}
          />
          <Script
            id="adsterra-banner"
            strategy="afterInteractive"
            dangerouslySetInnerHTML={{
              __html: `
                var atOptions = {
                  'key' : '8fcc3f83c250f7ce7879dbd892cfc63b',
                  'format' : 'iframe',
                  'height' : 90,
                  'width' : 728,
                  'params' : {}
                };
                var container = document.getElementById("ad-container-728x90");
                if (container) {
                  var script = document.createElement("script");
                  script.type = "text/javascript";
                  script.src = "//www.highperformanceformat.com/8fcc3f83c250f7ce7879dbd892cfc63b/invoke.js";
                  container.appendChild(script);
                }
              `,
            }}
          />
  </div>
        {/* Uppercase Italic Alphabets */}
        <Card className="shadow-xl border-0 bg-white/80 backdrop-blur-sm">
          <CardHeader>
            <CardTitle className="text-2xl text-center text-gray-800">
              Alfabeto Corsivo Maiuscolo - Lettere Maiuscole in Corsivo
            </CardTitle>
            <p className="text-center text-gray-600">
              Copia l'alfabeto maiuscolo in corsivo, lettere maiuscole corsive e caratteri scritti in corsivo
            </p>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 xl:grid-cols-8 gap-4">
              {uppercaseAlphabets.map((item, index) => (
                <div key={item.letter} className="group">
                  <div
                    className="relative bg-gradient-to-br h-full from-purple-100 to-blue-100 border-2 border-purple-200 rounded-xl p-4 text-center cursor-pointer hover:shadow-lg transition-all duration-200 hover:scale-105"
                    onClick={() => copyToClipboard(item.italic, index)}
                  >
                    <div className="text-3xl font-bold text-purple-700 mb-2">{item.italic}</div>
                    <div className="text-xs text-gray-600 mb-2">{item.letter}</div>
                    <div className="flex flex-wrap gap-1 justify-center">
                      {item.keywords.slice(0, 2).map((keyword, kidx) => (
                        <Badge key={kidx} variant="secondary" className="text-[10px] font-thin px-1 py-0">
                          {keyword}
                        </Badge>
                      ))}
                    </div>
                    {copiedIndex === index && (
                      <div className="absolute inset-0 bg-green-500/20 rounded-xl flex items-center justify-center">
                        <Check className="w-6 h-6 text-green-600" />
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
  <div className=" hidden md:flex justify-center w-full ">
      <div
            id="ad-container-728x90"
            style={{ width: "100%", maxWidth: "728px", minHeight: "90px" }}
          />
          <Script
            id="adsterra-banner"
            strategy="afterInteractive"
            dangerouslySetInnerHTML={{
              __html: `
                var atOptions = {
                  'key' : '8fcc3f83c250f7ce7879dbd892cfc63b',
                  'format' : 'iframe',
                  'height' : 90,
                  'width' : 728,
                  'params' : {}
                };
                var container = document.getElementById("ad-container-728x90");
                if (container) {
                  var script = document.createElement("script");
                  script.type = "text/javascript";
                  script.src = "//www.highperformanceformat.com/8fcc3f83c250f7ce7879dbd892cfc63b/invoke.js";
                  container.appendChild(script);
                }
              `,
            }}
          />
  </div>
        {/* Lowercase Italic Alphabets */}
        <Card className="shadow-xl border-0 bg-white/80 backdrop-blur-sm">
          <CardHeader>
            <CardTitle className="text-2xl text-center text-gray-800">
              Alfabeto Corsivo Minuscolo - Scrivi in Corsivo
            </CardTitle>
            <p className="text-center text-gray-600">
              Copia k minuscola in corsivo, scrivi in corsivo e caratteri corsivi per il tuo testo
            </p>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 xl:grid-cols-8 gap-4">
              {lowercaseAlphabets.map((item, index) => (
                <div key={item.letter} className="group">
                  <div
                    className="relative bg-gradient-to-br h-full from-blue-100 to-indigo-100 border-2 border-blue-200 rounded-xl p-4 text-center cursor-pointer hover:shadow-lg transition-all duration-200 hover:scale-105"
                    onClick={() => copyToClipboard(item.italic, index + 100)}
                  >
                    <div className="text-3xl font-bold text-blue-700 mb-2">{item.italic}</div>
                    <div className="text-xs text-gray-600 mb-2">{item.letter}</div>
                    <div className="flex flex-wrap gap-1 justify-center">
                      {item.keywords.slice(0, 1).map((keyword, kidx) => (
                        <Badge key={kidx} variant="secondary" className="text-[10px] font-thin px-1 py-0">
                          {keyword}
                        </Badge>
                      ))}
                    </div>
                    {copiedIndex === index + 100 && (
                      <div className="absolute inset-0 bg-green-500/20 rounded-xl flex items-center justify-center">
                        <Check className="w-6 h-6 text-green-600" />
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>



      </div>
    </div>
  )
}
